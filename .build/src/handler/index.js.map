{
  "version": 3,
  "sources": ["../../../src/handler/index.ts"],
  "sourcesContent": ["import { Scenes } from 'telegraf';\nimport { message } from 'telegraf/filters';\nimport { MyOpenAI } from '../client';\nimport { constructTextResponse } from '../domain';\n\nconst myAI = new MyOpenAI();\n\nexport const tldr = new Scenes.BaseScene('tldr');\n\ntldr.enter(async (ctx) => await ctx.reply('Please give me the text boss'));\n\ntldr.on(message('text'), async (ctx) => {\n  const textInput = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.tldr(textInput);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const ama = new Scenes.BaseScene('ama');\n\nama.enter(\n  async (ctx) =>\n    await ctx.reply('Give me your question boss, I would like to help!')\n);\n\nama.on(message('text'), async (ctx) => {\n  const question = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.ama(question);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const writeCode = new Scenes.BaseScene('writecode');\n\nwriteCode.enter(\n  async (ctx) =>\n    await ctx.reply(\n      'Give me your question boss!\\nNote: Check https://platform.openai.com/docs/guides/code to maximize the use of me on this.'\n    )\n);\n\nwriteCode.on(message('text'), async (ctx) => {\n  const instruction = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.writeCode(instruction);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const explainCode = new Scenes.BaseScene('explaincode');\n\nexplainCode.enter(\n  async (ctx) =>\n    await ctx.reply(\n      'Give me that hard code boss, I would like to help explain it!\\nNote: Check https://platform.openai.com/docs/guides/code to maximize the use of me on this.'\n    )\n);\n\nexplainCode.on(message('text'), async (ctx) => {\n  const codes = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.explainCode(codes);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const brainstorm = new Scenes.BaseScene('brainstorm');\n\nbrainstorm.enter(\n  async (ctx) => await ctx.reply('what do we want to brainstorm?boss?')\n);\n\nbrainstorm.on(message('text'), async (ctx) => {\n  const topic = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.brainstorm(topic);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const image = new Scenes.BaseScene('image');\n\nimage.enter(\n  async (ctx) =>\n    await ctx.reply('what kind of image that you want to create, boss?')\n);\n\nimage.on(message('text'), async (ctx) => {\n  const text = ctx.message.text;\n  try {\n    const response = await myAI.createImage(text);\n    await ctx.replyWithPhoto({ url: response });\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const convo = new Scenes.BaseScene('convo');\nconvo.enter(async (ctx) => {\n  await ctx.reply(\n    `Boss, you're entering conversation mode. I'll try to answer your question the best as I can!`\n  );\n  ctx.session.data = {\n    chat: [\n      {\n        role: 'system',\n        content:\n          \"You're a helpful assistant who can answer the general question from users very clearly and concisely. But in case you are unsure or you don't know about the answer, please respond with an apology\"\n      }\n    ]\n  };\n});\n\nconvo.command('stopconvo', async (ctx) => {\n  ctx.session.data.chat = [];\n  await ctx.reply('Thanks for having a great convo with me boss!');\n  ctx.scene.leave('convo');\n});\n\nconvo.on(message('text'), async (ctx) => {\n  const text = ctx.message.text;\n\n  ctx.session.data.chat.push({\n    role: 'user',\n    content: text\n  });\n\n  let response;\n\n  try {\n    response = await myAI.chat(ctx.session.data.chat);\n\n    ctx.session.data.chat.push({\n      role: 'assistant',\n      content: response.text\n    });\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please type again your question!'\n    );\n\n    return;\n  }\n\n  try {\n    await ctx.replyWithMarkdown(constructTextResponse(response));\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(constructTextResponse(response));\n  }\n\n  await ctx.reply(\n    'To stop conversation, please use command /stopconvo, thanks boss!'\n  );\n});\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const chat = async (ctx: any): Promise<void> => {\n  const text = ctx.message.text;\n  let response;\n\n  try {\n    response = await myAI.oneTimeChat(text);\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n    return;\n  }\n\n  try {\n    await ctx.replyWithMarkdown(constructTextResponse(response));\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(constructTextResponse(response));\n  }\n};\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../src/handler/index.ts"],
  "sourcesContent": ["import { Scenes } from 'telegraf';\nimport { message } from 'telegraf/filters';\nimport { MyOpenAI } from '../client';\nimport { constructTextResponse } from '../domain';\n\nconst myAI = new MyOpenAI();\n\nexport const tldr = new Scenes.BaseScene('tldr');\ntldr.enter(async (ctx) => await ctx.reply('Please give me the text boss'));\ntldr.on(message('text'), async (ctx) => {\n  const textInput = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.tldr(textInput);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const ama = new Scenes.BaseScene('ama');\nama.enter(\n  async (ctx) =>\n    await ctx.reply('Give me your question boss, I would like to help!')\n);\nama.on(message('text'), async (ctx) => {\n  const question = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.ama(question);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const writeCode = new Scenes.BaseScene('writecode');\nwriteCode.enter(\n  async (ctx) =>\n    await ctx.reply(\n      'Give me your question boss!\\nNote: Check https://platform.openai.com/docs/guides/code to maximize the use of me on this.'\n    )\n);\nwriteCode.on(message('text'), async (ctx) => {\n  const instruction = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.writeCode(instruction);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const explainCode = new Scenes.BaseScene('explaincode');\nexplainCode.enter(\n  async (ctx) =>\n    await ctx.reply(\n      'Give me that hard code boss, I would like to help explain it!\\nNote: Check https://platform.openai.com/docs/guides/code to maximize the use of me on this.'\n    )\n);\nexplainCode.on(message('text'), async (ctx) => {\n  const codes = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.explainCode(codes);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const brainstorm = new Scenes.BaseScene('brainstorm');\nbrainstorm.enter(\n  async (ctx) => await ctx.reply('what do we want to brainstorm?boss?')\n);\nbrainstorm.on(message('text'), async (ctx) => {\n  const topic = ctx.message.text;\n  try {\n    await ctx.reply('Hang on boss.. this might take a while.');\n    const response = await myAI.brainstorm(topic);\n    await ctx.reply(constructTextResponse(response));\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\nexport const image = new Scenes.BaseScene('image');\nimage.enter(\n  async (ctx) =>\n    await ctx.reply('what kind of image that you want to create, boss?')\n);\nimage.on(message('text'), async (ctx) => {\n  const text = ctx.message.text;\n  try {\n    const response = await myAI.createImage(text);\n    await ctx.replyWithPhoto({ url: response });\n    await ctx.scene.leave();\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n  }\n});\n\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nexport const chat = async (ctx: any): Promise<void> => {\n  const text = ctx.message.text;\n  let response;\n\n  try {\n    response = await myAI.chat(text);\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(\n      'Oopss.. there something wrong boss, please try again later!'\n    );\n    return;\n  }\n\n  try {\n    await ctx.replyWithMarkdown(constructTextResponse(response));\n  } catch (err) {\n    console.error(err);\n    await ctx.reply(constructTextResponse(response));\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
